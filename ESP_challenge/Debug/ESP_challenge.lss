
ESP_challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000652  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00000652  000006e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000ae  008000ae  00000734  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000764  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001133  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000822  00000000  00000000  000019c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007fb  00000000  00000000  000021e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  000029e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cd  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000668  00000000  00000000  0000307d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000036e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3a       	cpi	r26, 0xAE	; 174
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae ea       	ldi	r26, 0xAE	; 174
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3b       	cpi	r26, 0xB1	; 177
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 de 01 	call	0x3bc	; 0x3bc <main>
  8a:	0c 94 27 03 	jmp	0x64e	; 0x64e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:
	else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
	{
		return GET_BIT(DIO_PIND,(PinNum-DIO_PIN24));
	}
	return DIO_PIN8;
}
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	09 f0       	breq	.+2      	; 0x98 <DIO_WritePin+0x6>
  96:	43 c0       	rjmp	.+134    	; 0x11e <DIO_WritePin+0x8c>
  98:	88 30       	cpi	r24, 0x08	; 8
  9a:	68 f4       	brcc	.+26     	; 0xb6 <DIO_WritePin+0x24>
  9c:	4b b3       	in	r20, 0x1b	; 27
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	b9 01       	movw	r22, r18
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_WritePin+0x18>
  a6:	66 0f       	add	r22, r22
  a8:	77 1f       	adc	r23, r23
  aa:	8a 95       	dec	r24
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_WritePin+0x14>
  ae:	cb 01       	movw	r24, r22
  b0:	84 2b       	or	r24, r20
  b2:	8b bb       	out	0x1b, r24	; 27
  b4:	08 95       	ret
  b6:	98 ef       	ldi	r25, 0xF8	; 248
  b8:	98 0f       	add	r25, r24
  ba:	98 30       	cpi	r25, 0x08	; 8
  bc:	68 f4       	brcc	.+26     	; 0xd8 <DIO_WritePin+0x46>
  be:	48 b3       	in	r20, 0x18	; 24
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	b9 01       	movw	r22, r18
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_WritePin+0x3a>
  c8:	66 0f       	add	r22, r22
  ca:	77 1f       	adc	r23, r23
  cc:	9a 95       	dec	r25
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_WritePin+0x36>
  d0:	cb 01       	movw	r24, r22
  d2:	84 2b       	or	r24, r20
  d4:	88 bb       	out	0x18, r24	; 24
  d6:	08 95       	ret
  d8:	90 ef       	ldi	r25, 0xF0	; 240
  da:	98 0f       	add	r25, r24
  dc:	98 30       	cpi	r25, 0x08	; 8
  de:	68 f4       	brcc	.+26     	; 0xfa <DIO_WritePin+0x68>
  e0:	45 b3       	in	r20, 0x15	; 21
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	b9 01       	movw	r22, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_WritePin+0x5c>
  ea:	66 0f       	add	r22, r22
  ec:	77 1f       	adc	r23, r23
  ee:	9a 95       	dec	r25
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_WritePin+0x58>
  f2:	cb 01       	movw	r24, r22
  f4:	84 2b       	or	r24, r20
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	08 95       	ret
  fa:	98 ee       	ldi	r25, 0xE8	; 232
  fc:	98 0f       	add	r25, r24
  fe:	98 30       	cpi	r25, 0x08	; 8
 100:	08 f0       	brcs	.+2      	; 0x104 <DIO_WritePin+0x72>
 102:	54 c0       	rjmp	.+168    	; 0x1ac <DIO_WritePin+0x11a>
 104:	42 b3       	in	r20, 0x12	; 18
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	b9 01       	movw	r22, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_WritePin+0x80>
 10e:	66 0f       	add	r22, r22
 110:	77 1f       	adc	r23, r23
 112:	9a 95       	dec	r25
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_WritePin+0x7c>
 116:	cb 01       	movw	r24, r22
 118:	84 2b       	or	r24, r20
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	08 95       	ret
 11e:	61 11       	cpse	r22, r1
 120:	45 c0       	rjmp	.+138    	; 0x1ac <DIO_WritePin+0x11a>
 122:	88 30       	cpi	r24, 0x08	; 8
 124:	70 f4       	brcc	.+28     	; 0x142 <DIO_WritePin+0xb0>
 126:	4b b3       	in	r20, 0x1b	; 27
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	b9 01       	movw	r22, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_WritePin+0xa2>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	8a 95       	dec	r24
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_WritePin+0x9e>
 138:	cb 01       	movw	r24, r22
 13a:	80 95       	com	r24
 13c:	84 23       	and	r24, r20
 13e:	8b bb       	out	0x1b, r24	; 27
 140:	08 95       	ret
 142:	98 ef       	ldi	r25, 0xF8	; 248
 144:	98 0f       	add	r25, r24
 146:	98 30       	cpi	r25, 0x08	; 8
 148:	70 f4       	brcc	.+28     	; 0x166 <DIO_WritePin+0xd4>
 14a:	48 b3       	in	r20, 0x18	; 24
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	b9 01       	movw	r22, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_WritePin+0xc6>
 154:	66 0f       	add	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	9a 95       	dec	r25
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_WritePin+0xc2>
 15c:	cb 01       	movw	r24, r22
 15e:	80 95       	com	r24
 160:	84 23       	and	r24, r20
 162:	88 bb       	out	0x18, r24	; 24
 164:	08 95       	ret
 166:	90 ef       	ldi	r25, 0xF0	; 240
 168:	98 0f       	add	r25, r24
 16a:	98 30       	cpi	r25, 0x08	; 8
 16c:	70 f4       	brcc	.+28     	; 0x18a <DIO_WritePin+0xf8>
 16e:	45 b3       	in	r20, 0x15	; 21
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	b9 01       	movw	r22, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_WritePin+0xea>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	9a 95       	dec	r25
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_WritePin+0xe6>
 180:	cb 01       	movw	r24, r22
 182:	80 95       	com	r24
 184:	84 23       	and	r24, r20
 186:	85 bb       	out	0x15, r24	; 21
 188:	08 95       	ret
 18a:	98 ee       	ldi	r25, 0xE8	; 232
 18c:	98 0f       	add	r25, r24
 18e:	98 30       	cpi	r25, 0x08	; 8
 190:	68 f4       	brcc	.+26     	; 0x1ac <DIO_WritePin+0x11a>
 192:	42 b3       	in	r20, 0x12	; 18
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	b9 01       	movw	r22, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_WritePin+0x10e>
 19c:	66 0f       	add	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	9a 95       	dec	r25
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_WritePin+0x10a>
 1a4:	cb 01       	movw	r24, r22
 1a6:	80 95       	com	r24
 1a8:	84 23       	and	r24, r20
 1aa:	82 bb       	out	0x12, r24	; 18
 1ac:	08 95       	ret

000001ae <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
	if(PinDirection==INPUT)
 1ae:	61 11       	cpse	r22, r1
 1b0:	47 c0       	rjmp	.+142    	; 0x240 <DIO_SetPinDirection+0x92>
	{
		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
 1b2:	88 30       	cpi	r24, 0x08	; 8
 1b4:	70 f4       	brcc	.+28     	; 0x1d2 <DIO_SetPinDirection+0x24>
		{
			CLEAR_BIT(DIO_DDRA,PinNum);
 1b6:	4a b3       	in	r20, 0x1a	; 26
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	b9 01       	movw	r22, r18
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_SetPinDirection+0x16>
 1c0:	66 0f       	add	r22, r22
 1c2:	77 1f       	adc	r23, r23
 1c4:	8a 95       	dec	r24
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_SetPinDirection+0x12>
 1c8:	cb 01       	movw	r24, r22
 1ca:	80 95       	com	r24
 1cc:	84 23       	and	r24, r20
 1ce:	8a bb       	out	0x1a, r24	; 26
 1d0:	08 95       	ret
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
 1d2:	98 ef       	ldi	r25, 0xF8	; 248
 1d4:	98 0f       	add	r25, r24
 1d6:	98 30       	cpi	r25, 0x08	; 8
 1d8:	70 f4       	brcc	.+28     	; 0x1f6 <DIO_SetPinDirection+0x48>
		{
			CLEAR_BIT(DIO_DDRB,(PinNum-DIO_PIN8));
 1da:	47 b3       	in	r20, 0x17	; 23
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	b9 01       	movw	r22, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_SetPinDirection+0x3a>
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	9a 95       	dec	r25
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_SetPinDirection+0x36>
 1ec:	cb 01       	movw	r24, r22
 1ee:	80 95       	com	r24
 1f0:	84 23       	and	r24, r20
 1f2:	87 bb       	out	0x17, r24	; 23
 1f4:	08 95       	ret
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
 1f6:	90 ef       	ldi	r25, 0xF0	; 240
 1f8:	98 0f       	add	r25, r24
 1fa:	98 30       	cpi	r25, 0x08	; 8
 1fc:	70 f4       	brcc	.+28     	; 0x21a <DIO_SetPinDirection+0x6c>
		{
			CLEAR_BIT(DIO_DDRC,(PinNum-DIO_PIN16));
 1fe:	44 b3       	in	r20, 0x14	; 20
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	b9 01       	movw	r22, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_SetPinDirection+0x5e>
 208:	66 0f       	add	r22, r22
 20a:	77 1f       	adc	r23, r23
 20c:	9a 95       	dec	r25
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_SetPinDirection+0x5a>
 210:	cb 01       	movw	r24, r22
 212:	80 95       	com	r24
 214:	84 23       	and	r24, r20
 216:	84 bb       	out	0x14, r24	; 20
 218:	08 95       	ret
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
 21a:	98 ee       	ldi	r25, 0xE8	; 232
 21c:	98 0f       	add	r25, r24
 21e:	98 30       	cpi	r25, 0x08	; 8
 220:	08 f0       	brcs	.+2      	; 0x224 <DIO_SetPinDirection+0x76>
 222:	52 c0       	rjmp	.+164    	; 0x2c8 <DIO_SetPinDirection+0x11a>
		{
			CLEAR_BIT(DIO_DDRD,(PinNum-DIO_PIN24));
 224:	41 b3       	in	r20, 0x11	; 17
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	b9 01       	movw	r22, r18
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_SetPinDirection+0x84>
 22e:	66 0f       	add	r22, r22
 230:	77 1f       	adc	r23, r23
 232:	9a 95       	dec	r25
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_SetPinDirection+0x80>
 236:	cb 01       	movw	r24, r22
 238:	80 95       	com	r24
 23a:	84 23       	and	r24, r20
 23c:	81 bb       	out	0x11, r24	; 17
 23e:	08 95       	ret
		}
	}
	else if(PinDirection==OUTPUT)
 240:	61 30       	cpi	r22, 0x01	; 1
 242:	09 f0       	breq	.+2      	; 0x246 <DIO_SetPinDirection+0x98>
 244:	41 c0       	rjmp	.+130    	; 0x2c8 <DIO_SetPinDirection+0x11a>
	{
		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
 246:	88 30       	cpi	r24, 0x08	; 8
 248:	68 f4       	brcc	.+26     	; 0x264 <DIO_SetPinDirection+0xb6>
		{
			SET_BIT(DIO_DDRA,PinNum);
 24a:	4a b3       	in	r20, 0x1a	; 26
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	b9 01       	movw	r22, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_SetPinDirection+0xaa>
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	8a 95       	dec	r24
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_SetPinDirection+0xa6>
 25c:	cb 01       	movw	r24, r22
 25e:	84 2b       	or	r24, r20
 260:	8a bb       	out	0x1a, r24	; 26
 262:	08 95       	ret
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
 264:	98 ef       	ldi	r25, 0xF8	; 248
 266:	98 0f       	add	r25, r24
 268:	98 30       	cpi	r25, 0x08	; 8
 26a:	68 f4       	brcc	.+26     	; 0x286 <DIO_SetPinDirection+0xd8>
		{
			SET_BIT(DIO_DDRB,(PinNum-DIO_PIN8));
 26c:	47 b3       	in	r20, 0x17	; 23
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	b9 01       	movw	r22, r18
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_SetPinDirection+0xcc>
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	9a 95       	dec	r25
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_SetPinDirection+0xc8>
 27e:	cb 01       	movw	r24, r22
 280:	84 2b       	or	r24, r20
 282:	87 bb       	out	0x17, r24	; 23
 284:	08 95       	ret
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
 286:	90 ef       	ldi	r25, 0xF0	; 240
 288:	98 0f       	add	r25, r24
 28a:	98 30       	cpi	r25, 0x08	; 8
 28c:	68 f4       	brcc	.+26     	; 0x2a8 <DIO_SetPinDirection+0xfa>
		{
			SET_BIT(DIO_DDRC,(PinNum-DIO_PIN16));
 28e:	44 b3       	in	r20, 0x14	; 20
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	b9 01       	movw	r22, r18
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_SetPinDirection+0xee>
 298:	66 0f       	add	r22, r22
 29a:	77 1f       	adc	r23, r23
 29c:	9a 95       	dec	r25
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_SetPinDirection+0xea>
 2a0:	cb 01       	movw	r24, r22
 2a2:	84 2b       	or	r24, r20
 2a4:	84 bb       	out	0x14, r24	; 20
 2a6:	08 95       	ret
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
 2a8:	98 ee       	ldi	r25, 0xE8	; 232
 2aa:	98 0f       	add	r25, r24
 2ac:	98 30       	cpi	r25, 0x08	; 8
 2ae:	60 f4       	brcc	.+24     	; 0x2c8 <DIO_SetPinDirection+0x11a>
		{
			SET_BIT(DIO_DDRD,(PinNum-DIO_PIN24));
 2b0:	41 b3       	in	r20, 0x11	; 17
 2b2:	21 e0       	ldi	r18, 0x01	; 1
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	b9 01       	movw	r22, r18
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_SetPinDirection+0x110>
 2ba:	66 0f       	add	r22, r22
 2bc:	77 1f       	adc	r23, r23
 2be:	9a 95       	dec	r25
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_SetPinDirection+0x10c>
 2c2:	cb 01       	movw	r24, r22
 2c4:	84 2b       	or	r24, r20
 2c6:	81 bb       	out	0x11, r24	; 17
 2c8:	08 95       	ret

000002ca <motor_Init>:
 * Return:			NULL
 *******************************************************************************/
void motor_Init(void)
{
	/*Motor A Initialization*/
	DIO_SetPinDirection(MOTORA_IN1_PIN,OUTPUT);
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	8a e1       	ldi	r24, 0x1A	; 26
 2ce:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTORA_IN2_PIN,OUTPUT);
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	8b e1       	ldi	r24, 0x1B	; 27
 2d6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDirection>
	DIO_WritePin(MOTORA_IN1_PIN,LOW);
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	8a e1       	ldi	r24, 0x1A	; 26
 2de:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(MOTORA_IN2_PIN,LOW);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	8b e1       	ldi	r24, 0x1B	; 27
 2e6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	
	/*Motor B Initialization*/
	DIO_SetPinDirection(MOTORB_IN1_PIN,OUTPUT);
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	8e e1       	ldi	r24, 0x1E	; 30
 2ee:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTORB_IN2_PIN,OUTPUT);
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	8f e1       	ldi	r24, 0x1F	; 31
 2f6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDirection>
	DIO_WritePin(MOTORB_IN1_PIN,LOW);
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	8e e1       	ldi	r24, 0x1E	; 30
 2fe:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(MOTORB_IN2_PIN,LOW);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	8f e1       	ldi	r24, 0x1F	; 31
 306:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 30a:	08 95       	ret

0000030c <motor_forward>:
 * Return:			NULL
 *******************************************************************************/
void motor_forward(void)
{
	/*Motor A*/
	DIO_WritePin(MOTORA_IN1_PIN,HIGH);
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	8a e1       	ldi	r24, 0x1A	; 26
 310:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(MOTORA_IN2_PIN,LOW);
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	8b e1       	ldi	r24, 0x1B	; 27
 318:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	/*Motor B*/
	DIO_WritePin(MOTORB_IN1_PIN,LOW);
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	8e e1       	ldi	r24, 0x1E	; 30
 320:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(MOTORB_IN2_PIN,HIGH);
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	8f e1       	ldi	r24, 0x1F	; 31
 328:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 32c:	08 95       	ret

0000032e <motor_backward>:
 * Return:			NULL
 *******************************************************************************/
void motor_backward(void)
{
	/*Motor A*/
	DIO_WritePin(MOTORA_IN1_PIN,LOW);
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	8a e1       	ldi	r24, 0x1A	; 26
 332:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(MOTORA_IN2_PIN,HIGH);
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	8b e1       	ldi	r24, 0x1B	; 27
 33a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	/*Motor B*/
	DIO_WritePin(MOTORB_IN1_PIN,HIGH);
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	8e e1       	ldi	r24, 0x1E	; 30
 342:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(MOTORB_IN2_PIN,LOW);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	8f e1       	ldi	r24, 0x1F	; 31
 34a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 34e:	08 95       	ret

00000350 <motor_Right>:
 * Return:			NULL
 *******************************************************************************/
void motor_Right(void)
{
	/*Motor A*/
	DIO_WritePin(MOTORA_IN1_PIN,LOW);
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	8a e1       	ldi	r24, 0x1A	; 26
 354:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(MOTORA_IN2_PIN,HIGH);
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	8b e1       	ldi	r24, 0x1B	; 27
 35c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	/*Motor B*/
	DIO_WritePin(MOTORB_IN1_PIN,LOW);
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	8e e1       	ldi	r24, 0x1E	; 30
 364:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(MOTORB_IN2_PIN,HIGH);
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	8f e1       	ldi	r24, 0x1F	; 31
 36c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 370:	08 95       	ret

00000372 <motor_left>:
 * Return:			NULL
 *******************************************************************************/
void motor_left(void)
{
	/*Motor A*/
	DIO_WritePin(MOTORA_IN1_PIN,HIGH);
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	8a e1       	ldi	r24, 0x1A	; 26
 376:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(MOTORA_IN2_PIN,LOW);
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	8b e1       	ldi	r24, 0x1B	; 27
 37e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	/*Motor B*/
	DIO_WritePin(MOTORB_IN1_PIN,HIGH);
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	8e e1       	ldi	r24, 0x1E	; 30
 386:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(MOTORB_IN2_PIN,LOW);
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	8f e1       	ldi	r24, 0x1F	; 31
 38e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 392:	08 95       	ret

00000394 <motor_stop>:
 * Return:			NULL
 *******************************************************************************/
void motor_stop(void)
{
	/*Motor A*/
	DIO_WritePin(MOTORA_IN1_PIN,LOW);
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	8a e1       	ldi	r24, 0x1A	; 26
 398:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(MOTORA_IN2_PIN,LOW);
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	8b e1       	ldi	r24, 0x1B	; 27
 3a0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	/*Motor B*/
	DIO_WritePin(MOTORB_IN1_PIN,LOW);
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	8e e1       	ldi	r24, 0x1E	; 30
 3a8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(MOTORB_IN2_PIN,LOW);
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	8f e1       	ldi	r24, 0x1F	; 31
 3b0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 3b4:	08 95       	ret

000003b6 <UART_Read>:
	}
}

void UART_Read(uint8 data)
{
	DataComming = data;
 3b6:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__data_end>
 3ba:	08 95       	ret

000003bc <main>:
 *                             Main Function                                   *
 *******************************************************************************/
int main(void)
{
	/*Initialize pinb4,b5,b6 to be output*/
	DIO_SetPinDirection(DIO_PIN12,OUTPUT);
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	8c e0       	ldi	r24, 0x0C	; 12
 3c0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN13,OUTPUT);
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	8d e0       	ldi	r24, 0x0D	; 13
 3c8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN14,OUTPUT);
 3cc:	61 e0       	ldi	r22, 0x01	; 1
 3ce:	8e e0       	ldi	r24, 0x0E	; 14
 3d0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDirection>
	/*Motors*/
	motor_Init();
 3d4:	0e 94 65 01 	call	0x2ca	; 0x2ca <motor_Init>
	
	Disable_Interrupts();
 3d8:	f8 94       	cli
	/*Initialize uart with 9600 baudrate*/
	UART_Init(9600,UART_Read);
 3da:	4b ed       	ldi	r20, 0xDB	; 219
 3dc:	51 e0       	ldi	r21, 0x01	; 1
 3de:	60 e8       	ldi	r22, 0x80	; 128
 3e0:	75 e2       	ldi	r23, 0x25	; 37
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 9a 02 	call	0x534	; 0x534 <UART_Init>
	Enable_Interrupts();
 3ea:	78 94       	sei
	
	/*Configure Esp to work as a server with port number 1234 and ssdi wifi_ekram*/
	UART_Write_String("AT+CWMODE=2");
 3ec:	80 e6       	ldi	r24, 0x60	; 96
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 ce 02 	call	0x59c	; 0x59c <UART_Write_String>
	UART_Write_Byte(0xD);
 3f4:	8d e0       	ldi	r24, 0x0D	; 13
 3f6:	0e 94 ca 02 	call	0x594	; 0x594 <UART_Write_Byte>
	UART_Write_Byte(0xA);
 3fa:	8a e0       	ldi	r24, 0x0A	; 10
 3fc:	0e 94 ca 02 	call	0x594	; 0x594 <UART_Write_Byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 400:	2f ef       	ldi	r18, 0xFF	; 255
 402:	89 e6       	ldi	r24, 0x69	; 105
 404:	98 e1       	ldi	r25, 0x18	; 24
 406:	21 50       	subi	r18, 0x01	; 1
 408:	80 40       	sbci	r24, 0x00	; 0
 40a:	90 40       	sbci	r25, 0x00	; 0
 40c:	e1 f7       	brne	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 410:	00 00       	nop
	_delay_ms(1000);
	
	UART_Write_String("AT+CIPMUX=1");
 412:	8c e6       	ldi	r24, 0x6C	; 108
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 ce 02 	call	0x59c	; 0x59c <UART_Write_String>
	UART_Write_Byte(0xD);
 41a:	8d e0       	ldi	r24, 0x0D	; 13
 41c:	0e 94 ca 02 	call	0x594	; 0x594 <UART_Write_Byte>
	UART_Write_Byte(0xA);
 420:	8a e0       	ldi	r24, 0x0A	; 10
 422:	0e 94 ca 02 	call	0x594	; 0x594 <UART_Write_Byte>
 426:	2f ef       	ldi	r18, 0xFF	; 255
 428:	89 e6       	ldi	r24, 0x69	; 105
 42a:	98 e1       	ldi	r25, 0x18	; 24
 42c:	21 50       	subi	r18, 0x01	; 1
 42e:	80 40       	sbci	r24, 0x00	; 0
 430:	90 40       	sbci	r25, 0x00	; 0
 432:	e1 f7       	brne	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 436:	00 00       	nop
	_delay_ms(1000);

	UART_Write_String("AT+CIPSERVER=1,1111"); /*port number is 1111*/
 438:	88 e7       	ldi	r24, 0x78	; 120
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 ce 02 	call	0x59c	; 0x59c <UART_Write_String>
	UART_Write_Byte(0xD);
 440:	8d e0       	ldi	r24, 0x0D	; 13
 442:	0e 94 ca 02 	call	0x594	; 0x594 <UART_Write_Byte>
	UART_Write_Byte(0xA);
 446:	8a e0       	ldi	r24, 0x0A	; 10
 448:	0e 94 ca 02 	call	0x594	; 0x594 <UART_Write_Byte>
 44c:	2f ef       	ldi	r18, 0xFF	; 255
 44e:	89 e6       	ldi	r24, 0x69	; 105
 450:	98 e1       	ldi	r25, 0x18	; 24
 452:	21 50       	subi	r18, 0x01	; 1
 454:	80 40       	sbci	r24, 0x00	; 0
 456:	90 40       	sbci	r25, 0x00	; 0
 458:	e1 f7       	brne	.-8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 45c:	00 00       	nop
	_delay_ms(1000);

	UART_Write_String("AT+CWSAP=\"HAFEZ\",\"1234567891\",1,3");
 45e:	8c e8       	ldi	r24, 0x8C	; 140
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 ce 02 	call	0x59c	; 0x59c <UART_Write_String>
	UART_Write_Byte(0xD);
 466:	8d e0       	ldi	r24, 0x0D	; 13
 468:	0e 94 ca 02 	call	0x594	; 0x594 <UART_Write_Byte>
	UART_Write_Byte(0xA);
 46c:	8a e0       	ldi	r24, 0x0A	; 10
 46e:	0e 94 ca 02 	call	0x594	; 0x594 <UART_Write_Byte>
 472:	2f ef       	ldi	r18, 0xFF	; 255
 474:	89 e6       	ldi	r24, 0x69	; 105
 476:	98 e1       	ldi	r25, 0x18	; 24
 478:	21 50       	subi	r18, 0x01	; 1
 47a:	80 40       	sbci	r24, 0x00	; 0
 47c:	90 40       	sbci	r25, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 480:	00 c0       	rjmp	.+0      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 482:	00 00       	nop
	_delay_ms(1000);

    while (1) 
    {
		/*Move forward*/
		if(DataComming == 'w')
 484:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 488:	87 37       	cpi	r24, 0x77	; 119
 48a:	79 f4       	brne	.+30     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
		{
			motor_forward();
 48c:	0e 94 86 01 	call	0x30c	; 0x30c <motor_forward>
			DIO_WritePin(DIO_PIN13,HIGH);
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	8d e0       	ldi	r24, 0x0D	; 13
 494:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(DIO_PIN12,LOW);
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	8c e0       	ldi	r24, 0x0C	; 12
 49c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(DIO_PIN14,LOW);
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	8e e0       	ldi	r24, 0x0E	; 14
 4a4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 4a8:	ed cf       	rjmp	.-38     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		}
		/*Move backward*/
		else if(DataComming == 's')
 4aa:	83 37       	cpi	r24, 0x73	; 115
 4ac:	79 f4       	brne	.+30     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		{
			motor_backward();
 4ae:	0e 94 97 01 	call	0x32e	; 0x32e <motor_backward>
			DIO_WritePin(DIO_PIN13,LOW);
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	8d e0       	ldi	r24, 0x0D	; 13
 4b6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(DIO_PIN12,LOW);
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	8c e0       	ldi	r24, 0x0C	; 12
 4be:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(DIO_PIN14,LOW);
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	8e e0       	ldi	r24, 0x0E	; 14
 4c6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 4ca:	dc cf       	rjmp	.-72     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		}
		/*move right*/
		else if(DataComming == 'a')
 4cc:	81 36       	cpi	r24, 0x61	; 97
 4ce:	79 f4       	brne	.+30     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
		{
			motor_left();
 4d0:	0e 94 b9 01 	call	0x372	; 0x372 <motor_left>
			DIO_WritePin(DIO_PIN14,HIGH);
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	8e e0       	ldi	r24, 0x0E	; 14
 4d8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(DIO_PIN12,LOW);
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	8c e0       	ldi	r24, 0x0C	; 12
 4e0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(DIO_PIN13,LOW);
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	8d e0       	ldi	r24, 0x0D	; 13
 4e8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 4ec:	cb cf       	rjmp	.-106    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		}
		/*move left*/
		else if(DataComming == 'd')
 4ee:	84 36       	cpi	r24, 0x64	; 100
 4f0:	79 f4       	brne	.+30     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		{
			motor_Right();
 4f2:	0e 94 a8 01 	call	0x350	; 0x350 <motor_Right>
			DIO_WritePin(DIO_PIN12,HIGH);
 4f6:	61 e0       	ldi	r22, 0x01	; 1
 4f8:	8c e0       	ldi	r24, 0x0C	; 12
 4fa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(DIO_PIN14,LOW);
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	8e e0       	ldi	r24, 0x0E	; 14
 502:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(DIO_PIN13,LOW);
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	8d e0       	ldi	r24, 0x0D	; 13
 50a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 50e:	ba cf       	rjmp	.-140    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		}
		/*stop*/
		else if(DataComming == 'x')
 510:	88 37       	cpi	r24, 0x78	; 120
 512:	09 f0       	breq	.+2      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 514:	b7 cf       	rjmp	.-146    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		{
			motor_stop();
 516:	0e 94 ca 01 	call	0x394	; 0x394 <motor_stop>
			DIO_WritePin(DIO_PIN12,LOW);
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	8c e0       	ldi	r24, 0x0C	; 12
 51e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(DIO_PIN13,LOW);
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	8d e0       	ldi	r24, 0x0D	; 13
 526:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(DIO_PIN14,LOW);
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	8e e0       	ldi	r24, 0x0E	; 14
 52e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 532:	a8 cf       	rjmp	.-176    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>

00000534 <UART_Init>:

char UART_Receive_Byte(void)
{
	while ( !(UCSRA & (1<<RXC)) );
	return UDR;
}
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	ea 01       	movw	r28, r20
 53a:	dc 01       	movw	r26, r24
 53c:	cb 01       	movw	r24, r22
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	aa 1f       	adc	r26, r26
 544:	bb 1f       	adc	r27, r27
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	aa 1f       	adc	r26, r26
 54c:	bb 1f       	adc	r27, r27
 54e:	9c 01       	movw	r18, r24
 550:	ad 01       	movw	r20, r26
 552:	22 0f       	add	r18, r18
 554:	33 1f       	adc	r19, r19
 556:	44 1f       	adc	r20, r20
 558:	55 1f       	adc	r21, r21
 55a:	22 0f       	add	r18, r18
 55c:	33 1f       	adc	r19, r19
 55e:	44 1f       	adc	r20, r20
 560:	55 1f       	adc	r21, r21
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	72 e1       	ldi	r23, 0x12	; 18
 566:	8a e7       	ldi	r24, 0x7A	; 122
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 05 03 	call	0x60a	; 0x60a <__udivmodsi4>
 56e:	21 50       	subi	r18, 0x01	; 1
 570:	31 09       	sbc	r19, r1
 572:	8a b1       	in	r24, 0x0a	; 10
 574:	88 61       	ori	r24, 0x18	; 24
 576:	8a b9       	out	0x0a, r24	; 10
 578:	20 97       	sbiw	r28, 0x00	; 0
 57a:	29 f0       	breq	.+10     	; 0x586 <UART_Init+0x52>
 57c:	d0 93 b0 00 	sts	0x00B0, r29	; 0x8000b0 <UART_Rx_Callback+0x1>
 580:	c0 93 af 00 	sts	0x00AF, r28	; 0x8000af <UART_Rx_Callback>
 584:	57 9a       	sbi	0x0a, 7	; 10
 586:	86 e8       	ldi	r24, 0x86	; 134
 588:	80 bd       	out	0x20, r24	; 32
 58a:	30 bd       	out	0x20, r19	; 32
 58c:	29 b9       	out	0x09, r18	; 9
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	08 95       	ret

00000594 <UART_Write_Byte>:
 594:	5d 9b       	sbis	0x0b, 5	; 11
 596:	fe cf       	rjmp	.-4      	; 0x594 <UART_Write_Byte>
 598:	8c b9       	out	0x0c, r24	; 12
 59a:	08 95       	ret

0000059c <UART_Write_String>:
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
 5a0:	ec 01       	movw	r28, r24
 5a2:	88 81       	ld	r24, Y
 5a4:	88 23       	and	r24, r24
 5a6:	31 f0       	breq	.+12     	; 0x5b4 <UART_Write_String+0x18>
 5a8:	21 96       	adiw	r28, 0x01	; 1
 5aa:	0e 94 ca 02 	call	0x594	; 0x594 <UART_Write_Byte>
 5ae:	89 91       	ld	r24, Y+
 5b0:	81 11       	cpse	r24, r1
 5b2:	fb cf       	rjmp	.-10     	; 0x5aa <UART_Write_String+0xe>
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <__vector_13>:



ISR(USART_RXC_vect)
{
 5ba:	1f 92       	push	r1
 5bc:	0f 92       	push	r0
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	0f 92       	push	r0
 5c2:	11 24       	eor	r1, r1
 5c4:	2f 93       	push	r18
 5c6:	3f 93       	push	r19
 5c8:	4f 93       	push	r20
 5ca:	5f 93       	push	r21
 5cc:	6f 93       	push	r22
 5ce:	7f 93       	push	r23
 5d0:	8f 93       	push	r24
 5d2:	9f 93       	push	r25
 5d4:	af 93       	push	r26
 5d6:	bf 93       	push	r27
 5d8:	ef 93       	push	r30
 5da:	ff 93       	push	r31
	UART_Rx_Callback(UDR);
 5dc:	8c b1       	in	r24, 0x0c	; 12
 5de:	e0 91 af 00 	lds	r30, 0x00AF	; 0x8000af <UART_Rx_Callback>
 5e2:	f0 91 b0 00 	lds	r31, 0x00B0	; 0x8000b0 <UART_Rx_Callback+0x1>
 5e6:	09 95       	icall
}
 5e8:	ff 91       	pop	r31
 5ea:	ef 91       	pop	r30
 5ec:	bf 91       	pop	r27
 5ee:	af 91       	pop	r26
 5f0:	9f 91       	pop	r25
 5f2:	8f 91       	pop	r24
 5f4:	7f 91       	pop	r23
 5f6:	6f 91       	pop	r22
 5f8:	5f 91       	pop	r21
 5fa:	4f 91       	pop	r20
 5fc:	3f 91       	pop	r19
 5fe:	2f 91       	pop	r18
 600:	0f 90       	pop	r0
 602:	0f be       	out	0x3f, r0	; 63
 604:	0f 90       	pop	r0
 606:	1f 90       	pop	r1
 608:	18 95       	reti

0000060a <__udivmodsi4>:
 60a:	a1 e2       	ldi	r26, 0x21	; 33
 60c:	1a 2e       	mov	r1, r26
 60e:	aa 1b       	sub	r26, r26
 610:	bb 1b       	sub	r27, r27
 612:	fd 01       	movw	r30, r26
 614:	0d c0       	rjmp	.+26     	; 0x630 <__udivmodsi4_ep>

00000616 <__udivmodsi4_loop>:
 616:	aa 1f       	adc	r26, r26
 618:	bb 1f       	adc	r27, r27
 61a:	ee 1f       	adc	r30, r30
 61c:	ff 1f       	adc	r31, r31
 61e:	a2 17       	cp	r26, r18
 620:	b3 07       	cpc	r27, r19
 622:	e4 07       	cpc	r30, r20
 624:	f5 07       	cpc	r31, r21
 626:	20 f0       	brcs	.+8      	; 0x630 <__udivmodsi4_ep>
 628:	a2 1b       	sub	r26, r18
 62a:	b3 0b       	sbc	r27, r19
 62c:	e4 0b       	sbc	r30, r20
 62e:	f5 0b       	sbc	r31, r21

00000630 <__udivmodsi4_ep>:
 630:	66 1f       	adc	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	88 1f       	adc	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	1a 94       	dec	r1
 63a:	69 f7       	brne	.-38     	; 0x616 <__udivmodsi4_loop>
 63c:	60 95       	com	r22
 63e:	70 95       	com	r23
 640:	80 95       	com	r24
 642:	90 95       	com	r25
 644:	9b 01       	movw	r18, r22
 646:	ac 01       	movw	r20, r24
 648:	bd 01       	movw	r22, r26
 64a:	cf 01       	movw	r24, r30
 64c:	08 95       	ret

0000064e <_exit>:
 64e:	f8 94       	cli

00000650 <__stop_program>:
 650:	ff cf       	rjmp	.-2      	; 0x650 <__stop_program>
